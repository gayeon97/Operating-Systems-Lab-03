import java.io.*;
import java.util.*;

public class Banker {

	public static void main(String[] args) {		
		
		int numTasks = 0; //represents the number of Tasks in the system
		int numResources = 0; //represents the number of resource types the resource manager has
		ArrayList<Integer> listOfUnitsOfEachResource = new ArrayList<>(); //represents the list of units of each resource type
		ArrayList<Task> tasks = new ArrayList<>(); //represents the list of tasks in the system
		Scanner sc = null;
		
		//scanner is reading from a file created from the name of the file passed as the 1st parameter to the command line argument
		try {
			//System.out.println(args[0]);
			sc = new Scanner(new File(args[0])); 
		} catch (Exception e){ //the file name was NOT passed in as the 1st parameter to the command line argument
			System.out.println("Please make sure that you are giving the file name as a command line argument.");
		}
		
		int placeholder = 0; //this will be used for when we are saving different activities to the LinkedHashMap of list of activities
		while (sc.hasNext()) { //read from the file			
			//save T, the number of Tasks
			numTasks = sc.nextInt();
			//System.out.println("This is the number of tasks: " + numTasks);
			
			//save R, the number of resource types
			numResources = sc.nextInt();
			//System.out.println("This is the number of resources: " + numResources);
			
			//for each resource type, save the number of units available into the "listOfUnitsOfEachResource"
			for (int i = 0; i < numResources; i ++) {
				listOfUnitsOfEachResource.add(sc.nextInt());
				//System.out.printf("Resource R%d has %d units.\n", i+1, listOfUnitsOfEachResource.get(i));
			}
			
			//into the listOfTasks, add 'T' many Tasks
			//create an arraylist of tasks of size T: ArrayList<Task> tasks = new ArrayList<>(T);
			for (int i = 0; i < numTasks; i ++) {
				//create new task of index i
				Task t = new Task(i);
				
				//add the newly created to the arrayList of tasks
				tasks.add(t);
			}
			
			//then until you reach the end of the file,
			while (sc.hasNext()) {				
				//read the activity state (one of: initiate, request, release, terminate)
				//and save it to a temporary String, tempActivity
				String tempActivityType = sc.next();
				//System.out.printf("Activity: %s ", tempActivityType);

				//create an arrayList of integers to store informations of the activity
				ArrayList<Integer> activityInfo = new ArrayList<>();
				//for each activity, save the four unsigned integers
				//that represent the information of the activity
				for (int i = 0; i < 4; i ++) {
					activityInfo.add(sc.nextInt());
					//System.out.printf("%d ",activityInfo.get(i));
				}
				//System.out.println();
				
				//get the correct task from the list of tasks matching the 'task-number' of the current activity being read
				//System.out.printf("this is the Task %d's index from the list of tasks: %d\n\n",activityInfo.get(0), (activityInfo.get(0) - 1));
				Task tempTask = tasks.get(activityInfo.get(0) - 1);
								
				//save the new activity pair (activityName, listOfActivityInfo) in format of (placeholder activityName listOfActivityInfo)
				//into the right LinkedHashMap list according to the activityName
				if (tempActivityType.contains("initiate")) {
			 		tempTask.getAllInitActivities().put(placeholder + " " + tempActivityType, activityInfo);
			  	} else if (tempActivityType.contains("request")) {
			  		tempTask.getAllRequestActivities().put(placeholder + " " + tempActivityType, activityInfo);
			 	} else if (tempActivityType.contains("release")) {
			 		tempTask.getAllReleaseActivities().put(placeholder + " " + tempActivityType, activityInfo);
			 	} else if (tempActivityType.contains("terminate")) {
			 		tempTask.getAllTerminateActivities().put(placeholder + " " + tempActivityType, activityInfo);
			 	}
				
				placeholder ++;
			} //end of the inner while loop for reading the file
			
		} //end of the outer while loop for reading the file
		
		for (int i = 0; i < tasks.size(); i ++) {
			System.out.printf("for Task %d: \n", i+1);
			Task task = tasks.get(i);
			
			for (Map.Entry m:task.getAllInitActivities().entrySet()) { 
				System.out.println(m.getKey()+": "+m.getValue().toString()); 
			} 
			
			for (Map.Entry m:task.getAllRequestActivities().entrySet()) { 
				System.out.println(m.getKey()+": "+m.getValue().toString()); 
			} 
			
			for (Map.Entry m:task.getAllReleaseActivities().entrySet()) { 
				System.out.println(m.getKey()+": "+m.getValue().toString()); 
			} 
			
			for (Map.Entry m:task.getAllTerminateActivities().entrySet()) { 
				System.out.println(m.getKey()+": "+m.getValue().toString()); 
			} 
			
			System.out.println("");
		} //end of the for loop for printing out different LinkedHashMap lists for debugging purposes

	} //end of the main function

} //end of the Banker class
